flask-task-manager/
│
├── app.py                   # Main application file containing Flask routes and logic
├── initialize_db.py         # Script to initialize the SQLite database (create tables)
├── config.py                # Configuration file (optional, if needed for settings)
│
├── templates/               # Folder for HTML templates
│   ├── layout.html          # Base HTML template (for shared structure)
│   ├── login.html           # Login page template
│   ├── signup.html          # Signup page template
│   ├── index.html           # Home page (after login, view tasks)
│   ├── create_task.html     # Create new task page template
│   ├── edit_task.html       # Edit task page template
│   ├── profile.html         # Profile page template (view/edit user info)
│   └── error.html           # Error page template (404, 500, etc.)
│
├── static/                  # Folder for static files like CSS, JS, images
│   ├── css/
│   │   └── styles.css       # Custom CSS styles
│   ├── js/
│   │   └── scripts.js       # Custom JS functions (optional)
│   └── images/
│       └── logo.png         # Logo or other images
│
├── .gitignore               # Git ignore file for excluding unnecessary files (e.g., __pycache__, .env)
├── README.ini               # Project description, setup instructions, features, etc.
├── requirements.txt         # List of dependencies (Flask, SQLite, etc.)
└── tasks.db                 # SQLite database file (this will be created when running the app)



[General]
Project Name = Flask Task Manager
Description = A task management web application built using Flask and SQLite, with user authentication and CRUD functionality for tasks.
Author = Your Name
Version = 1.0

[Setup]
1. Install the necessary dependencies:
    - Flask
    - SQLite
    - Flask-Werkzeug (for password hashing)

    To install them, use the following command:
    ```bash
    pip install flask sqlite3 werkzeug
    ```

2. Clone or download the project repository.

3. Initialize the SQLite database by running the `initialize_db.py` script (provided below). This will set up the necessary tables for users and tasks.

    ```python
    import sqlite3

    # Initialize the database
    conn = sqlite3.connect('tasks.db')
    cursor = conn.cursor()

    # Create Users table
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT NOT NULL UNIQUE,
        email TEXT NOT NULL UNIQUE,
        password TEXT NOT NULL
    );
    ''')

    # Create Tasks table
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS tasks (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT NOT NULL,
        description TEXT,
        due_date TEXT,
        priority TEXT,
        user_id INTEGER,
        FOREIGN KEY (user_id) REFERENCES users (id)
    );
    ''')

    conn.commit()
    conn.close()
    ```

4. Run the Flask app using:
    ```bash
    python app.py
    ```

    The app will run on `http://127.0.0.1:5000/` by default.

[Features]
- **User Authentication**: Users can sign up, log in, and log out.
- **Task Management**: Users can add, edit, and delete tasks.
- **User Profiles**: Users can view and edit their profile information.
- **Task Display**: Users can see their own tasks, with sorting and filtering options.
- **Flash Messages**: Notifications for actions like login, task creation, etc.
- **Password Hashing**: User passwords are securely stored using the `werkzeug.security` module.

[Technologies Used]
- **Flask**: A lightweight Python web framework for building web applications.
- **SQLite**: A lightweight database engine for storing user and task data.
- **Bootstrap**: A front-end framework for responsive web design.
- **Werkzeug**: A library used for secure password hashing.

[Usage]
- **Login**: After running the app, go to the login page and enter your credentials.
- **Signup**: Create a new user account on the signup page if you don't have one.
- **Tasks**: After logging in, you can create tasks, edit them, or mark them as done.
- **Profile**: Edit your profile information, including username, email, and password.

[Additional Features]
- **Optional**: Add task prioritization, due dates, and descriptions for each task.
- **Task Filtering**: Display tasks based on priority or due date.
- **Enhanced Frontend**: Attractive, responsive design using Bootstrap.

[Troubleshooting]
- **Error: Database Not Found**: Ensure that the database file (`tasks.db`) exists in the root directory, or run the `initialize_db.py` script.
- **Flash Messages Not Showing**: Ensure you have `app.secret_key` set for session management.

[Contact]
For further questions or contributions, feel free to reach out:
- Email: your_email@example.com
- GitHub: github.com/yourusername

[License]
MIT License - See LICENSE file for details.
